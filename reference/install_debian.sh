#!/bin/sh
# shellcheck disable=SC2129

# create debian rootfs in the given device or file

################################################ User Variables ################################################

HOST_NAME="superbird"
USER_NAME="superbird"

# USER_PASSWORD="superbird"
# genrate hash: openssl passwd -6 "superbird"
#   shellcheck disable=SC2016
USER_PASS_HASH='$6$zeM8ZwO/Xke05h6X$UtmM0sIBznj4hxmd/UGUO1YHUr0emOn.9u7G1yQRVGR4XutYCstDzVLzpUw9PNWrhYRAEg73ovkC4JNPFlSmI1'

INSTALL_PATH="/mnt/root_data"  # this is where we will mount the partition to do our install
ARCHITECTURE="arm64"

# DISTRO_REPO_URL="http://deb.debian.org/debian/"
DISTRO_REPO_URL="http://la.mirrors.clouvider.net/debian/"
DISTRO_BRANCH="trixie"
DISTRO_VARIANT="minbase"

TIMEZONE="America/Los_Angeles"
LOCALE="en_US.UTF-8"
SERIAL_BAUD="115200"

# init system, either systemd or sysvinit
#   without systemd-sysv, no reboot/shutdown commands
PACKAGES="systemd systemd-sysv dbus kmod"
# base packages
PACKAGES="$PACKAGES usbutils htop btop nano tree file less locales sudo dialog apt"
# stuff for networking
PACKAGES="$PACKAGES wget curl iputils-ping iputils-tracepath iputils-arping iproute2 net-tools openssh-server ntp"
# minimal xorg
PACKAGES="$PACKAGES xserver-xorg-core xserver-xorg-video-fbdev xterm xinit x11-xserver-utils shared-mime-info"
# xorg input
PACKAGES="$PACKAGES xserver-xorg-input-evdev libinput-bin xserver-xorg-input-libinput xinput"
# additional required tools
PACKAGES="$PACKAGES fbset x11vnc u-boot-tools"
# python dev for fun
PACKAGES="$PACKAGES python3 python3-pip python3-virtualenv python3-dev"


# NOTE: we cannot install chromium at at the debootstrap stage, because dbus cannot be properly configured
#   so we install chromium in a separate stage using chroot

STAGE2_PACKAGES="chromium"

################################################ Running Variables ################################################

CSV_PACKAGES=$(echo "$PACKAGES"| tr ' ' ',')  # need comma-separated list of packages for debootstrap


################################################ Functions ################################################

copy_from_host() {
	# copy a file from path on host to the same path within the chroot
	cp -r "$1" "${INSTALL_PATH}/$1"
}

in_target() {
	# run command(s) within the chroot
	chroot "${INSTALL_PATH}" "$@"
}

################################################ Entrypoint ################################################

# need to be root
if [ "$(id -u)" != "0" ]; then
	echo "Must be run as root"
	exit 1
fi

TARGET_PARTITION="$1"
if [ -z "$TARGET_PARTITION" ]; then
	echo "Need to provide a target device/partition or file"
	echo "	if target is a file, it must already exist"
	echo "ex: $0 /dev/data"
	exit 1
fi

if [ ! -f "$TARGET_PARTITION" ] && [ ! -b "$TARGET_PARTITION" ]; then
	echo "Could not find target: $TARGET_PARTITION"
	exit 1
fi

set -e

echo "Going to install Debian $DISTRO_BRANCH $DISTRO_VARIANT $ARCHITECTURE on $TARGET_PARTITION"


################################################ Format Partition ################################################

echo "formatting $TARGET_PARTITION"
mountpoint "$INSTALL_PATH" && umount "$INSTALL_PATH"
mkfs.ext4 "$TARGET_PARTITION" || {
	echo "failed to format (or user cancelled format), quitting"
	exit 1
}
mkdir -p "$INSTALL_PATH"

if [ -b "$TARGET_PARTITION" ]; then
	echo "mounting block device"
	mount "$TARGET_PARTITION" "$INSTALL_PATH"
else
	echo "mounting file using loopback"
	mount -o loop "$TARGET_PARTITION" "$INSTALL_PATH"
fi

echo ""
echo "Blanking screen, because debootstrap will clobber some of that address space and produce artifacts"
echo ""
echo 1 > /sys/class/graphics/fb0/blank


################################################ Install Packages ################################################
echo "Installing packages: $CSV_PACKAGES"
echo ""
echo "Debootstrap: debootstrap --variant=$DISTRO_VARIANT --no-check-gpg --arch=$ARCHITECTURE $DISTRO_BRANCH $INSTALL_PATH $DISTRO_REPO_URL"
echo ""

debootstrap --verbose --variant="$DISTRO_VARIANT" --no-check-gpg --include="$CSV_PACKAGES" --arch="$ARCHITECTURE" "$DISTRO_BRANCH" "$INSTALL_PATH" "$DISTRO_REPO_URL"

in_target apt update
in_target apt install -y $STAGE2_PACKAGES

################################################ Copy Kernel Modules ################################################

echo "Copying over kernel modules"
cp -r /lib/modules "${INSTALL_PATH}/lib/"

################################################ Setup Xorg ################################################

echo "creating xorg.conf"

XORG_CONF=$(
	cat << EOXF
# Xorg.conf for superbird
# generated by $0

Section "ServerFlags"
	Option		"BlankTime"		"10"
	Option		"StandbyTime"	"10"
	Option		"SuspendTime"	"10"
	Option		"OffTime"		"10"
	Option		"dpms"			"on"
EndSection

Section "ServerLayout"
	Identifier		"Simple Layout"
	Screen			"Panel"
	InputDevice		"TouchScreen"	"Pointer"
EndSection

Section "Screen"
	Identifier		"Panel"
	Monitor			"DefaultMonitor"
	Device			"FramebufferDevice"
	DefaultDepth 24
	DefaultFbBpp 32
	SubSection "Display"
		Depth 32
		Virtual 480 800
		ViewPort 0 0
		Modes "480x800"
	EndSubSection
EndSection

Section "Device"
	Identifier		"FramebufferDevice"
	Driver			"fbdev"
	Option			"fbdev"		"/dev/fb0"
EndSection

Section "Monitor"
	Identifier		"DefaultMonitor"
	Option			"DPMS"		"on"
EndSection

Section "InputDevice"
	Identifier  "TouchScreen"
	Driver		"evdev"
	Option		"Device"		"/dev/input/event3"
	Option		"Mode"			"Absolute"
	Option		"GrabDevice"	"false"
EndSection
EOXF
)

mkdir -p "${INSTALL_PATH}/etc/X11"
echo "$XORG_CONF" > "${INSTALL_PATH}/etc/X11/xorg.conf"

################################################ Configure ################################################

echo "adding ttyS0 console at $SERIAL_BAUD to inittab"
echo 'T0:23:respawn:/sbin/getty -L ttyS0 '"$SERIAL_BAUD"' vt100' >> "${INSTALL_PATH}/etc/inittab"


################################################ Setup Hostname and Hosts ################################################

echo "Setting hostname"
echo "$HOST_NAME" > "${INSTALL_PATH}/etc/hostname"

echo "Generating /etc/hosts"

HOSTS_CONTENT=$(
	cat <<- EOHF
	# generated by $0
	127.0.0.1     localhost
	127.0.0.1     $HOST_NAME
	::1           localhost $HOST_NAME ip6-localhost ip6-loopback
	ff02::1		ip6-allnodes
	ff02::2       ip6-allrouters
	192.168.7.1   host
	EOHF
)
echo "$HOSTS_CONTENT" > "${INSTALL_PATH}/etc/hosts"


################################################ Setup USB Network Gadget ################################################

echo "Installing usbgadget"
mkdir -p "${INSTALL_PATH}/scripts"


SCR_USB=$(
	cat << 'EOUSB'
#!/bin/bash

# Setup Linux USB Gadget for just rndis
#   this version is meant to run within native debian on the device

# Available options:

# usb_f_rndis.ko
# usb_f_fs.ko
# usb_f_midi.ko
# usb_f_mtp.ko
# usb_f_ptp.ko
# usb_f_audio_source.ko
# usb_f_accessory.ko


######### Variables

SERIAL_NUMBER="12345678"
# 18d1:4e40 Google Inc. Nexus 7
ID_VENDOR="0x18d1"
ID_PRODUCT="0x4e40"
MANUFACTURER="Spotify"
PRODUCT="Superbird"
# ADBD_LOG_FILE="/tmp/adbd.log"


# Research
#   starting point: https://github.com/frederic/superbird-bulkcmd/blob/main/scripts/enable-adb.sh.client
#   info about configfs https://elinux.org/images/e/ef/USB_Gadget_Configfs_API_0.pdf
#   info about usbnet and bridging https://developer.ridgerun.com/wiki/index.php/How_to_use_USB_device_networking
#   more info, including for windows https://learn.adafruit.com/turning-your-raspberry-pi-zero-into-a-usb-gadget/ethernet-gadget
#   a gist that was helpful: https://gist.github.com/geekman/5bdb5abdc9ec6ac91d5646de0c0c60c4
#   https://www.kernel.org/doc/Documentation/usb/gadget_configfs.txt

######### Functions

create_device() {
	# create usb gadget device
	ID_VEND="$1"
	ID_PROD="$2"
	BCD_DEVICE="$3"
	BCD_USB="$4"
	echo "###  Creating device $ID_VEND $ID_PROD"
	mkdir -p "/dev/usb-ffs"
	mkdir -p "/dev/usb-ffs/adb"
	mountpoint /sys/kernel/config/ || mount -t configfs none "/sys/kernel/config/"
	mkdir -p "/sys/kernel/config/usb_gadget/g1"
	echo "$ID_VEND" > "/sys/kernel/config/usb_gadget/g1/idVendor"
	echo "$ID_PROD" > "/sys/kernel/config/usb_gadget/g1/idProduct"
	echo "$BCD_DEVICE" > "/sys/kernel/config/usb_gadget/g1/bcdDevice"
	echo "$BCD_USB" > "/sys/kernel/config/usb_gadget/g1/bcdUSB"
	mkdir -p "/sys/kernel/config/usb_gadget/g1/strings/0x409"
	sleep 1
}

configure_device() {
	# configure usb gadget device
	MANUF="$1"
	PROD="$2"
	SERIAL="$3"
	CONFIG_NAME="$4"
	echo "###  Configuring device as $MANUF $PROD"
	echo "$MANUF" > "/sys/kernel/config/usb_gadget/g1/strings/0x409/manufacturer"
	echo "$PROD" > "/sys/kernel/config/usb_gadget/g1/strings/0x409/product"
	echo "$SERIAL" > "/sys/kernel/config/usb_gadget/g1/strings/0x409/serialnumber"
	mkdir -p "/sys/kernel/config/usb_gadget/g1/configs/c.1"
	mkdir -p "/sys/kernel/config/usb_gadget/g1/configs/c.1/strings/0x409"
	echo "$CONFIG_NAME" > "/sys/kernel/config/usb_gadget/g1/configs/c.1/strings/0x409/configuration"
	echo 500 > "/sys/kernel/config/usb_gadget/g1/configs/c.1/MaxPower"
	ln -s "/sys/kernel/config/usb_gadget/g1/configs/c.1" "/sys/kernel/config/usb_gadget/g1/os_desc/c.1"
	sleep 1
}

add_function(){
	# add a function to existing config id
	FUNCTION_NAME="$1"
	echo "###  adding function $FUNCTION_NAME to config c.1"
	mkdir -p "/sys/kernel/config/usb_gadget/g1/functions/${FUNCTION_NAME}"
	ln -s "/sys/kernel/config/usb_gadget/g1/functions/${FUNCTION_NAME}" "/sys/kernel/config/usb_gadget/g1/configs/c.1"
}

start_adb_daemon() {
	# mount adb functionfs and start daemon
	LOG_FILE="$1"
	echo "###  starting adb daemon"
	mkdir -p /dev/usbgadget/adb
	mount -t functionfs adb /dev/usbgadget/adb
	if [ ! -f "/usr/bin/adbd" ]; then
		echo "Unable to find adbd binary!"
	else
		/usr/bin/adbd > "$LOG_FILE" 2>&1 &
		echo "$!" > /tmp/adbd.pid
	fi
	sleep 5s
}

attach_driver(){
	# attach the created gadget device to our UDC driver
	UDC_DEVICE=$(/bin/ls -1 /sys/class/udc/)  # ff400000.dwc2_a
	echo "###  Attaching gadget to UDC device: $UDC_DEVICE"
	echo "$UDC_DEVICE" > /sys/kernel/config/usb_gadget/g1/UDC
	sleep 1
}

configure_usbnet() {
	DEVICE="$1"
	NETWORK="$2"  # just the first 3 octets
	NETMASK="$3"
	echo "###  bringing up $DEVICE with ${NETWORK}.2"
	ifconfig "$DEVICE" up
	ifconfig "$DEVICE" "${NETWORK}.2" netmask "$NETMASK" broadcast "${NETWORK}.255"
	echo "adding routes for $DEVICE"
	ip route add default via "${NETWORK}.1" dev "$DEVICE"
	echo "making sure you have a dns server"
	echo "nameserver 1.1.1.1" > /etc/resolv.conf
	sleep 1
}

shutdown_gadget() {
	# shutdown and clean up usb gadget and services
	#   ref: https://wiki.tizen.org/USB/Linux_USB_Layers/Configfs_Composite_Gadget/Usage_eq._to_g_ffs.ko
	echo "$UDC_DEVICE" > /sys/kernel/config/usb_gadget/g1/UDC
	if [ -f "/tmp/adbd.pid" ]; then
		kill -9 "$(cat /tmp/adbd.pid)"
		umount /dev/usbgadget/adb
	fi
	find "/sys/kernel/config/usb_gadget/g1/configs/c.1" -type l -exec unlink {} \;
	rm -r "/sys/kernel/config/usb_gadget/g1/configs/c.1/strings/0x409"
	rm -r /sys/kernel/config/usb_gadget/g1/strings/0x409
	rm -r "/sys/kernel/config/usb_gadget/g1/configs/c.1"
	rm -r /sys/kernel/config/usb_gadget/g1/functions/*
	rm -r /sys/kernel/config/usb_gadget/g1/

}

######### Entrypoint

echo "### Configuring USB Gadget with adb and rndis"
create_device "$ID_VENDOR" "$ID_PRODUCT" "0x0223" "0x0200"
configure_device "$MANUFACTURER" "$PRODUCT" "$SERIAL_NUMBER" "Multi-Function Device"

add_function "rndis.usb0"  # rndis usb ethernet

# add_function "ffs.adb"  # adb
# start_adb_daemon "$ADBD_LOG_FILE"

attach_driver

configure_usbnet "usb0" "192.168.7" "255.255.255.0"

echo "Done setting up USB Gadget"

EOUSB
)

echo "$SCR_USB" > "${INSTALL_PATH}/scripts/setup_usbgadget.sh"
chmod +x "${INSTALL_PATH}/scripts/setup_usbgadget.sh"

echo "Installing systemd service for usbgadget"

SYSD_USBGADGET=$(
	cat <<- EOSGF
	# generated by $0
	[Unit]
	Description=USB Gadget for RNDIS and ADB
	Before=network-pre.target
	Wants=network-pre.target

	[Service]
	ExecStart=/scripts/setup_usbgadget.sh > /var/log/setup_usbgadget.log 2>&1

	[Install]
	WantedBy=network.target
	EOSGF
)

echo "$SYSD_USBGADGET" > "${INSTALL_PATH}/lib/systemd/system/usbgadget.service"
in_target ln -s "/lib/systemd/system/usbgadget.service" "/etc/systemd/system/multi-user.target.wants/usbgadget.service"


echo "Copying display setup script"

SCR_CLR=$(
	cat <<- 'EOCLRS'
	#!/bin/bash
	# clear the display

	FB="fb0"
	echo 1 > /sys/class/graphics/$FB/osd_clear

	EOCLRS
)
echo "$SCR_CLR" > "${INSTALL_PATH}/scripts/clear_display.sh"
chmod +x "${INSTALL_PATH}/scripts/clear_display.sh"

SCR_DISP=$(
	cat <<- 'EODISP'
	#!/bin/bash
	# set up display mode

	# by default portrait orientation:
	#   width: 480
	#   height: 800
	#   depth: 32 bits


	FB="fb0"

	WIDTH="480"
	HEIGHT="800"
	DEPTH="32"  # mandatory 32bit

	# set the framebuffer geometry and bit depth
	fbset -fb /dev/${FB} -g "$WIDTH" "$HEIGHT" "$WIDTH" "$HEIGHT" "$DEPTH"

	# clear scaling values
	echo 0 > /sys/class/graphics/$FB/free_scale
	echo 1 > /sys/class/graphics/$FB/freescale_mode

	# scaling values are always N - 1, where N is the value you actually want
	# under normal conditions these two lines should match numbers
	#   but if you need to scale things, adjust free_scale_axis to compensate
	#   but keep window_axis as-is
	echo 0 0 479 799 > /sys/class/graphics/$FB/free_scale_axis
	echo 0 0 479 799 > /sys/class/graphics/$FB/window_axis

	# this seems to "apply" the values set above
	echo 0x10001 > /sys/class/graphics/$FB/free_scale

	# make sure backlight is on
	echo 100 > /sys/devices/platform/backlight/backlight/aml-bl/brightness

	EODISP
)
echo "$SCR_DISP" > "${INSTALL_PATH}/scripts/setup_display.sh"
chmod +x "${INSTALL_PATH}/scripts/setup_display.sh"


################################################ Setup VNC Service ################################################

echo "Copying vnc setup script"


echo "#!/bin/bash" > "${INSTALL_PATH}/scripts/setup_vnc.sh"
echo "# generated by $0" >> "${INSTALL_PATH}/scripts/setup_vnc.sh"

SCR_VNC=$(
	cat <<- 'EOSVF'
	LOGFILE="/var/log/vnc.log"
	/usr/bin/x11vnc -rfbport 5900 -safer -passwd "superbird" -forever -quiet -scale 1 -display ":0" -shared -geometry "480x800" > "$LOGFILE" 2>&1
	EOSVF
)

echo "$SCR_VNC" >> "${INSTALL_PATH}/scripts/setup_vnc.sh"
chmod +x "${INSTALL_PATH}/scripts/setup_vnc.sh"

echo "Installing systemd service for vnc"

SYSD_VNC=$(
	cat <<- EOVF
	# generated by $0
	[Unit]
	Description=Start or stop VNC service
	Wants=network-online.target

	[Service]
	ExecStart=/scripts/setup_vnc.sh
	RestartSec=5

	[Install]
	WantedBy=multi-user.target
	EOVF
)

echo "$SYSD_VNC" > "${INSTALL_PATH}/lib/systemd/system/vnc.service"
in_target ln -s "/lib/systemd/system/vnc.service" "/etc/systemd/system/multi-user.target.wants/vnc.service"


################################################ Setup Backlight control service ################################################

SCR_BACKLIGHT=$(
	cat << 'EOBLF'
#!/bin/bash
# set up the backlight by following if display is on or off

# 0 - 100, display brightness when On
BRIGHTNESS=100

# seconds, how often to check state of display
CHECK_TIME=0.1

# the backlight brightness control
BACKLIGHT="/sys/devices/platform/backlight/backlight/aml-bl/brightness"

while :;do
	DISPLAY_STATUS=$(DISPLAY=:0 xset -q|grep "Monitor is"|awk '{print $3}')
	if [ "$DISPLAY_STATUS" == "Off" ]; then
		# only turn off backlight if it actually says "Off", fallback is always on
		echo 0 > $BACKLIGHT
	else
		echo $BRIGHTNESS > $BACKLIGHT
	fi
	sleep $CHECK_TIME
done

# try to leave backlight on if the loop breaks
echo $BRIGHTNESS > $BACKLIGHT

EOBLF
)

echo "$SCR_BACKLIGHT" >> "${INSTALL_PATH}/scripts/setup_backlight.sh"
chmod +x "${INSTALL_PATH}/scripts/setup_backlight.sh"

SYSD_BACKLIGHT=$(
	cat <<- EOBLSF
	# generated by $0
	[Unit]
	Description=Backlight sync to display state
	Wants=network-online.target

	[Service]
	ExecStart=/scripts/setup_backlight.sh
	RestartSec=5

	[Install]
	WantedBy=multi-user.target
	EOBLSF
)

echo "$SYSD_BACKLIGHT" > "${INSTALL_PATH}/lib/systemd/system/backlight.service"
in_target ln -s "/lib/systemd/system/backlight.service" "/etc/systemd/system/multi-user.target.wants/backlight.service"


################################################ Setup Chromium Kiosk Service ################################################

echo "copying chromium script"

SCR_CHROME=$(
	cat << 'EOSCH'
#!/bin/bash
# Start X with just Chromium browser
#	fullscreen, kiosk mode, tweaked for touchscreen, with given url

# handle defaults
URL="https://192.168.1.144:8123/lovelace/"
WINDOW_WIDTH="480"
WINDOW_HEIGHT="800"
SCALE="1.0"
EXTRA_CHROMIUM_ARGS=""

## Hardcoded Vars
CHROMIUM_BINARY="/usr/bin/chromium"
USER_DATA_DIR="/config"
WINDOW_POSITION="0,0"  # always want window to start at 0,0
DISK_CACHE_DIR="/dev/null"  # prevent chromium from caching anything

echo "Starting chromium kiosk"

command -v "$CHROMIUM_BINARY" || {
	echo "Need to install chromium! "
	exit 1
}

/scripts/setup_display.sh

# does not get cleaned up properly after previous exit
rm ${USER_DATA_DIR}/SingletonLock

CHROMIUM_CMD="xinit $CHROMIUM_BINARY \
	--no-gpu \
	--disable-gpu \
	--no-sandbox \
	--autoplay-policy=no-user-gesture-required \
	--use-fake-ui-for-media-stream \
	--use-fake-device-for-media-stream \
	--disable-sync \
	--remote-debugging-port=9222 \
	--display=$DISPLAY \
	--force-device-scale-factor=$SCALE \
	--window-size=${WINDOW_WIDTH},${WINDOW_HEIGHT} \
	--window-position=$WINDOW_POSITION \
	--pull-to-refresh=1 \
	--disable-smooth-scrolling \
	--disable-login-animations \
	--disable-modal-animations \
	--noerrdialogs \
	--no-first-run \
	--disable-infobars \
	--fast \
	--fast-start \
	--disable-pinch \
	--overscroll-history-navigation=0 \
	--disable-translate \
	--disable-overlay-scrollbar \
	--disable-features=OverlayScrollbar \
	--disable-features=TranslateUI \
	--disk-cache-dir=$DISK_CACHE_DIR \
	--password-store=basic \
	--touch-events=enabled \
	--ignore-certificate-errors \
	--user-data-dir=$USER_DATA_DIR \
	--kiosk $EXTRA_CHROMIUM_ARGS \
	--app=$URL"

echo ""
echo "running chromium command: $CHROMIUM_CMD"
echo ""
$CHROMIUM_CMD

# clear the display after chromium is killed, otherwise the last image will remain frozen
/scripts/clear_display.sh

EOSCH
)

echo "$SCR_CHROME" > "${INSTALL_PATH}/scripts/start_chromium.sh"
chmod +x "${INSTALL_PATH}/scripts/start_chromium.sh"

echo "Installing systemd service for chromium"

SYSD_CHROMIUM=$(
	cat <<- EOCH
	# generated by $0
	[Unit]
	Description=Chromium Fullscreen
	Wants=network-online.target

	[Service]
	ExecStart=/scripts/start_chromium.sh > /var/log/chromium.log 2>&1
	RestartSec=5

	[Install]
	WantedBy=multi-user.target
	EOCH
)

echo "$SYSD_CHROMIUM" > "${INSTALL_PATH}/lib/systemd/system/chromium.service"
in_target ln -s "/lib/systemd/system/chromium.service" "/etc/systemd/system/multi-user.target.wants/chromium.service"


################################################ Cleanup systemd and timezone stuff ################################################

echo "making sure symlinks exist for systemd"
in_target ln -sf "/usr/bin/systemd" "/usr/sbin/init"  # package systemd-sysv does this too
in_target ln -sf "/lib/systemd/system/getty@.service" "/etc/systemd/system/getty.target.wants/getty@ttyS0.service"

echo "Setting timezone to $TIMEZONE"
echo "$TIMEZONE" > "${INSTALL_PATH}/etc/timezone"
ln -sf "${INSTALL_PATH}/usr/share/zoneinfo/$TIMEZONE" "${INSTALL_PATH}/etc/localtime"
in_target dpkg-reconfigure -f noninteractive tzdata

echo "Generating locales for $LOCALE"
sed -i -e 's/# '"$LOCALE"' UTF-8/'"$LOCALE"' UTF-8/' "${INSTALL_PATH}/etc/locale.gen"
echo "LANG=\"${LOCALE}\"" > "${INSTALL_PATH}/etc/default/locale"
in_target dpkg-reconfigure --frontend=noninteractive locales


################################################ Setup user accounts ################################################

# NOTE: you could set the root password here, but you need to do it interactively
# in_target passwd

echo "Creating regular user (with sudo rights): $USER_NAME"

in_target useradd -p "$USER_PASS_HASH" --shell /bin/bash "$USER_NAME"
in_target mkdir -p "/home/${USER_NAME}"
in_target chown "${USER_NAME}":"${USER_NAME}" "/home/${USER_NAME}"
in_target chmod 700 "/home/${USER_NAME}"

# let user use sudo without password
echo "$USER_NAME ALL=(ALL) NOPASSWD: ALL" >> "${INSTALL_PATH}/etc/sudoers"

set +e  # ok if some of these fail
in_target usermod -aG cdrom "$USER_NAME"
in_target usermod -aG floppy "$USER_NAME"
in_target usermod -aG sudo "$USER_NAME"
in_target usermod -aG audio "$USER_NAME"
in_target usermod -aG dip "$USER_NAME"
in_target usermod -aG video "$USER_NAME"
in_target usermod -aG plugdev "$USER_NAME"
# in_target usermod -aG netdev "$USER_NAME"
# in_target usermod -aG ssh "$USER_NAME"
set -e


################################################ Done! ################################################

echo "synching disk changes"
sync

echo "Un-mounting $INSTALL_PATH"
umount "$INSTALL_PATH"

echo "Done installing debian to: $TARGET_PARTITION"
